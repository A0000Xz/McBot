apply(plugin: "dev.architectury.loom")

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

repositories {
    mavenCentral()
    maven {
        url = 'https://maven.nova-committee.cn/releases'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.parent.minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    compileOnly "org.projectlombok:lombok:1.18.24"
    annotationProcessor "org.projectlombok:lombok:1.18.24"
}

def fabric_subprojects = project.parent.subprojects.findAll({
    it.name != "wrapper"
})

remapJar {
    outputs.upToDateWhen { false }

    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        delete fileTree("build/tmp/versions/META-INF/jars")
        copy {
            from {
                fabric_subprojects.collect {
                    it.remapJar.outputs.files
                }
            }
            into("build/tmp/versions/META-INF/jars")
        }
    }

    from("../../LICENSE")
    from("build/tmp/versions")
}

tasks.withType(ProcessResources).configureEach {
    def replaceProperties = [
            "version"             : mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(["fabric.mod.json"]) {
        expand replaceProperties + [project: project]
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

loom {
    runConfigs.configureEach {
        runDir "../run"
    }
}